#!/usr/bin/env python
"""
Perform a quick test of the new tesseroid with variable density.

It compares the V, gz and gzz generated by the numerical model with the
analytical solution for each density function: a linear, an exponential and
a discontinuous.
"""

from __future__ import division
import numpy as np
from tesseroid_density import tesseroid
from fatiando.constants import MEAN_EARTH_RADIUS, SI2MGAL, SI2EOTVOS, G
from fatiando.mesher import TesseroidMesh
from fatiando import gridder


def linear_test():
    a = -(3300-2670)/35000.
    b = (3300-2670)/35000.*MEAN_EARTH_RADIUS + 2670

    def density_linear(height):
        r = height + MEAN_EARTH_RADIUS
        return a*r + b

    def shell_linear_density(height, top, bottom, a, b):
        r = height + MEAN_EARTH_RADIUS
        r1 = bottom + MEAN_EARTH_RADIUS
        r2 = top + MEAN_EARTH_RADIUS
        constant = np.pi*G*a*(r2**4 - r1**4) + 4/3.*np.pi*G*b*(r2**3 - r1**3)
        potential = constant/r
        data = {'potential': potential,
                'gx': 0,
                'gy': 0,
                'gz': SI2MGAL*(potential/r),
                'gxx': SI2EOTVOS*(-potential/r**2),
                'gxy': 0,
                'gxz': 0,
                'gyy': SI2EOTVOS*(-potential/r**2),
                'gyz': 0,
                'gzz': SI2EOTVOS*(2*potential/r**2)}
        return data

    top, bottom = 0, -1000
    model = TesseroidMesh((0, 360, -90, 90, top, bottom), (1, 6, 12))
    model.addprop("density", [density_linear for i in range(model.size)])

    fields = "potential gz gzz".split()
    shape = (10, 10)
    grids = {"pole": gridder.regular((89, 90, 0, 1), shape, z=2e3),
             "equator": gridder.regular((0, 1, 0, 1), shape, z=2e3)}

    for grid in grids:
        lats, lons, heights = grids[grid]
        analytical = shell_linear_density(heights[0], top, bottom, a, b)
        for field in fields:
            result = getattr(tesseroid, field)(lons, lats, heights, model)
            diff = np.abs(result - analytical[field])/np.abs(analytical[field])
            diff = 100*np.max(diff)
            assert(diff < 1e-1)


def exponential_test(b=1e5, top=0, bottom=-1000):

    def shell_exponential_density(height, top, bottom, a, b, c, deltah):
        r = height + MEAN_EARTH_RADIUS
        r1 = bottom + MEAN_EARTH_RADIUS
        r2 = top + MEAN_EARTH_RADIUS
        constant = 4*np.pi*G*a*b*(
            (r1**2 + 2*r1*b + 2*b**2)*np.exp(-(r1 - deltah)/b) -
            (r2**2 + 2*r2*b + 2*b**2)*np.exp(-(r2 - deltah)/b))
        constant += 4/3*np.pi*G*c*(r2**3 - r1**3)
        potential = constant/r
        data = {'potential': potential,
                'gx': 0,
                'gy': 0,
                'gz': SI2MGAL*(potential/r),
                'gxx': SI2EOTVOS*(-potential/r**2),
                'gxy': 0,
                'gxz': 0,
                'gyy': SI2EOTVOS*(-potential/r**2),
                'gyz': 0,
                'gzz': SI2EOTVOS*(2*potential/r**2)}
        return data

    rho0, rho1 = 2670, 3300
    a = (rho1 - rho0)/(np.exp((abs(top - bottom))/b) - 1)
    c = rho0 - a
    deltah = MEAN_EARTH_RADIUS

    def density_exponential(height):
        r = height + MEAN_EARTH_RADIUS
        return a*np.exp(-(r - deltah)/b) + c

    model = TesseroidMesh((0, 360, -90, 90, top, bottom), (1, 6, 12))
    model.addprop("density", [density_exponential for i in range(model.size)])

    fields = "potential gz gzz".split()
    shape = (10, 10)
    grids = {"pole": gridder.regular((89, 90, 0, 1), shape, z=2e3),
             "equator": gridder.regular((0, 1, 0, 1), shape, z=2e3)}

    for grid in grids:
        lats, lons, heights = grids[grid]
        analytical = shell_exponential_density(heights[0],
                                               top, bottom,
                                               a, b, c, deltah)
        for field in fields:
            result = getattr(tesseroid, field)(lons, lats, heights, model)
            diff = np.abs(result - analytical[field])/np.abs(analytical[field])
            diff = 100*np.max(diff)
            assert(diff < 1e-1)


def discontinuous_test():
    rho_1, rho_2 = 2900, 2670
    thickness = 1000.
    R2 = MEAN_EARTH_RADIUS
    R1 = R2 - thickness
    Rc = R2 - thickness/3.

    def discontinuous_density(height):
        r = height + MEAN_EARTH_RADIUS
        if R1 <= r and r < Rc:
            return rho_1
        elif Rc <= r and r <= R2:
            return rho_2

    def shell_discontinuous_density(height, R1, R2, Rc, rho_1, rho_2):
        r = height + MEAN_EARTH_RADIUS
        constant = 4/3*np.pi*G*(rho_1*(Rc**3 - R1**3) +
                                rho_2*(R2**3 - Rc**3))
        potential = constant/r
        data = {'potential': potential,
                'gx': 0,
                'gy': 0,
                'gz': SI2MGAL*(potential/r),
                'gxx': SI2EOTVOS*(-potential/r**2),
                'gxy': 0,
                'gxz': 0,
                'gyy': SI2EOTVOS*(-potential/r**2),
                'gyz': 0,
                'gzz': SI2EOTVOS*(2*potential/r**2)}
        return data

    top, bottom = 0, -1000
    model = TesseroidMesh((0, 360, -90, 90, top, bottom), (1, 6, 12))
    model.addprop("density", [discontinuous_density
                              for i in range(model.size)])

    fields = "potential gz gzz".split()
    shape = (10, 10)
    grids = {"pole": gridder.regular((89, 90, 0, 1), shape, z=2e3),
             "equator": gridder.regular((0, 1, 0, 1), shape, z=2e3)}

    for grid in grids:
        lats, lons, heights = grids[grid]
        analytical = shell_discontinuous_density(heights[0],
                                                 R1, R2, Rc,
                                                 rho_1, rho_2)
        for field in fields:
            result = getattr(tesseroid, field)(lons, lats, heights, model)
            diff = np.abs(result - analytical[field])/np.abs(analytical[field])
            diff = 100*np.max(diff)
            assert(diff < 1e-1)


linear_test()
exponential_test(b=15e3, bottom=-35000)
discontinuous_test()
